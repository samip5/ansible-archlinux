---
- name: Install Arch Linux from an Arch ISO
  hosts: localhost
  tasks:
    - name: Check internet connectivity
      wait_for:
        host: archlinux.org
        port: 80

    - name: Enable ntp
      command: /usr/bin/timedatectl set-ntp true

    - name: Enable ntp
      command: /usr/bin/timedatectl status
      register: ntp
    - debug: msg="{{ ntp.stdout }}"
    - debug: msg="{{ ntp.stderr }}"
    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;
          tags:
            - wipefs
        - name: Create boot partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 1
            part_end: 512MB
            name: boot
            flags: [boot, esp]
            state: present
        - name: Create root partition
          parted:
            device: '{{ install_drive }}'
            label: gpt
            number: 2
            part_start: 512MB
            name: root
            flags: [lvm]
            state: present
      tags:
        - repartition
    - name: Check disks
      command: /usr/bin/fdisk -l
      register: fdisk
    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          filesystem:
            dev: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create ext4 filesystem in root volume
          filesystem:
            dev: '{{ install_drive }}{{ root_partition_suffix }}'
            fstype: ext4
            force: yes
        - name: Get UUID for boot filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
          register: boot_uuid
          changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
          register: root_uuid
          changed_when: false
      tags:
        - create_filesystems
    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            state: mounted
        - name: Create mountpoint for boot volume
          file:
            path: /mnt/boot
            state: directory
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            state: mounted
      tags:
        - mount_filesystems
    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://www.archlinux.org/mirrorlist/?country=US&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
      tags:
        - mirrors
    - name: Run pacstrap
      command: pacstrap /mnt base dhclient efibootmgr grub openssh python sudo
      tags:
        - pacstrap
    - name: Generate fstab
      block:
        - name: Generate blank fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab
        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '1'
            state: present
        - name: Add boot volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            opts: defaults
            passno: '2'
            state: present
      tags:
        - fstab
    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Helsinki /etc/localtime
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
            - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}
        - name: Create locale.conf
          copy:
            content: "LANG=en_US.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales
    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ wired_interface }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp
            dest: /mnt/etc/netctl/wired
        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable wired
      tags:
        - netctl
    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd
    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio
    - name: Set up grub
      block:
        - name: Add commandline information to grub config
          lineinfile:
            dest: /mnt/etc/default/grub
            regexp: ^GRUB_CMDLINE_LINUX=
            line: GRUB_CMDLINE_LINUX="root=UUID={{root_uuid.stdout}}"
        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      tags:
        - grub
